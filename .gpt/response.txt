&&& FILE: ./backend/main.py
&&& CONTENT:
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from database import async_session, init_db
from models import Building
from sqlalchemy.future import select
from geoalchemy2.functions import ST_AsGeoJSON, ST_Intersects, ST_GeomFromEWKT
import json

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    await init_db()

async def get_db():
    async with async_session() as session:
        yield session

@app.get("/")
async def read_root():
    return {"message": "Hello World"}

@app.get("/buildings/nuremberg")
async def get_buildings_nuremberg(db: AsyncSession = Depends(get_db)):
    """
    Get buildings within the predefined boundary of Nürnberg.
    """
    try:
        # Define the bounding box for Nürnberg (approximate coordinates)
        nuremberg_bbox = 'POLYGON((11.0 49.4, 11.2 49.4, 11.2 49.6, 11.0 49.6, 11.0 49.4))'

        # Convert WKT polygon to geometry
        geom = ST_GeomFromEWKT(f'SRID=4326;{nuremberg_bbox}')

        # Build the query
        query = select(
            Building.id,
            ST_AsGeoJSON(Building.geom).label('geometry')
        ).where(
            ST_Intersects(Building.geom, geom)
        )

        # Execute the query
        result = await db.execute(query)
        buildings = result.fetchall()

        # Construct GeoJSON response
        features = []
        for building in buildings:
            feature = {
                "type": "Feature",
                "geometry": json.loads(building.geometry),
                "properties": {
                    "id": building.id
                }
            }
            features.append(feature)

        geojson = {
            "type": "FeatureCollection",
            "features": features
        }

        return geojson

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

&&& FILE: ./frontend/index.html
&&& CONTENT:
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EasyOpenData - Nürnberg 3D Buildings</title>
    <script src="https://cesium.com/downloads/cesiumjs/releases/1.97/Build/Cesium/Cesium.js"></script>
    <link href="https://cesium.com/downloads/cesiumjs/releases/1.97/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
    <style>
        html, body, #cesiumContainer {
            width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;
        }
    </style>
</head>
<body>
    <div id="cesiumContainer"></div>
    <script>
        // Initialize the Cesium Viewer
        const viewer = new Cesium.Viewer('cesiumContainer', {
            terrainProvider: Cesium.createWorldTerrain()
        });

        // Center the view on Nürnberg
        viewer.camera.setView({
            destination : Cesium.Cartesian3.fromDegrees(11.074, 49.45, 10000.0)
        });

        // Fetch the building data from the backend
        fetch('http://localhost:8000/buildings/nuremberg')
            .then(response => response.json())
            .then(data => {
                // Load the GeoJSON data into Cesium
                viewer.dataSources.add(Cesium.GeoJsonDataSource.load(data, {
                    clampToGround: true
                })).then(function(dataSource) {
                    // Adjust the style of the buildings
                    const entities = dataSource.entities.values;
                    for (let i = 0; i < entities.length; i++) {
                        const entity = entities[i];
                        entity.polygon.material = Cesium.Color.ORANGE.withAlpha(0.5);
                        entity.polygon.extrudedHeight = 50; // Example height
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching building data:', error);
            });
    </script>
</body>
</html>

&&& FILE: ./backend/requirements.txt
&&& CONTENT:
fastapi
uvicorn[standard]
asyncpg
psycopg2-binary
sqlalchemy
geoalchemy2
# Additional dependencies
python-multipart
geojson

&&& FILE: ./backend/models.py
&&& CONTENT:
from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from geoalchemy2 import Geometry

Base = declarative_base()

class Building(Base):
    __tablename__ = 'buildings'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    geom = Column(Geometry('MULTIPOLYGONZ', srid=4326))  # Adjust geometry type as needed

&&& FILE: ./backend/database.py
&&& CONTENT:
import os
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from models import Base

DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql+asyncpg://user:password@localhost:5432/your_db')

engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(
    bind=engine, class_=AsyncSession, expire_on_commit=False
)

# Function to create tables
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

&&& FILE: ./backend/main.py
&&& CONTENT:
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from database import async_session, init_db
from models import Building
from sqlalchemy.future import select
from geoalchemy2.functions import ST_AsGeoJSON, ST_Intersects, ST_GeomFromEWKT
import json

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    await init_db()

async def get_db():
    async with async_session() as session:
        yield session

@app.get("/")
async def read_root():
    return {"message": "Hello World"}

@app.get("/buildings/nuremberg")
async def get_buildings_nuremberg(db: AsyncSession = Depends(get_db)):
    """
    Get buildings within the predefined boundary of Nürnberg.
    """
    try:
        # Define the bounding box for Nürnberg (approximate coordinates)
        nuremberg_bbox = 'POLYGON((11.0 49.4, 11.2 49.4, 11.2 49.6, 11.0 49.6, 11.0 49.4))'

        # Convert WKT polygon to geometry
        geom = ST_GeomFromEWKT(f'SRID=4326;{nuremberg_bbox}')

        # Build the query
        query = select(
            Building.id,
            ST_AsGeoJSON(Building.geom).label('geometry')
        ).where(
            ST_Intersects(Building.geom, geom)
        )

        # Execute the query
        result = await db.execute(query)
        buildings = result.fetchall()

        # Construct GeoJSON response
        features = []
        for building in buildings:
            feature = {
                "type": "Feature",
                "geometry": json.loads(building.geometry),
                "properties": {
                    "id": building.id
                }
            }
            features.append(feature)

        geojson = {
            "type": "FeatureCollection",
            "features": features
        }

        return geojson

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

&&& FILE: ./frontend/README.md
&&& CONTENT:
# EasyOpenData Frontend

## Overview

This is a simple frontend HTML page that displays 3D buildings of Nürnberg using CesiumJS. It fetches building data from the backend and renders them on a 3D map.

## Setup

1. **Install Dependencies**

   No installation is required. The frontend uses CDN links for CesiumJS.

2. **Run the Backend**

   Ensure the backend server is running:

   ```bash
   uvicorn main:app --reload
