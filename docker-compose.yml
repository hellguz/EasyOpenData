# PRODUCTION docker-compose.yml
# This file defines the production environment.
# Use `docker-compose -f docker-compose.yml up --build -d` to run.
services:
  easyopen_postgis:
    container_name: easyopen_postgis
    image: postgis/postgis:17-3.5
    restart: always
    ports:
      - "8735:5432"
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 8s
      retries: 40
    networks:
      - easyopen_network

  easyopen_backend:
    container_name: easyopen_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 5400
    volumes:
      # Code is built into the image for production. Mount only persistent data.
      - ./data/tileset:/data/tileset
      - ./data/tempfiles:/data/tempfiles
    ports:
      - "5400:5400"
    environment:
      DATABASE_URL: postgresql+asyncpg://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@easyopen_postgis:5432/${DATABASE_NAME:-easyopendata_database}
      STRIPE_SECRET_KEY: ${VITE_STRIPE_SECRET_KEY:?err_VITE_STRIPE_SECRET_KEY_not_set}
      FRONTEND_URL: ${FRONTEND_URL}
      PYTHONUNBUFFERED: "1"
      LOG_LEVEL: "INFO"
      ENVIRONMENT: "production"
    depends_on:
      easyopen_postgis:
        condition: service_healthy
    networks:
      - easyopen_network

  easyopen_frontend:
    container_name: easyopen_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        VITE_BASE_URL: ${VITE_BASE_URL}
        VITE_TILESET_URL: ${VITE_TILESET_URL}
        VITE_STRIPE_PUBLISHABLE_KEY: ${VITE_STRIPE_PUBLISHABLE_KEY}
    ports:
      - "5173:80"
    # No volumes for code/node_modules needed as it's a static build served by Nginx
    # Environment variables here are for Nginx if needed, Vite vars are build-time.
    networks:
      - easyopen_network

  easyopen_tileset:
    container_name: easyopen_tileset
    image: nginx:alpine
    restart: always
    ports:
      - "5576:80"
    volumes:
      - ./data/tileset:/usr/share/nginx/html:ro
      - ./backend/tileset.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - easyopen_network

  easyopen_backup_service:
    container_name: easyopen_backup_service
    build: ./backend/db_backup
    depends_on:
      - easyopen_postgis
    volumes:
      - ./data/postgres_backups:/backups
    environment:
      PGHOST: easyopen_postgis
      PGUSER: ${DATABASE_USER:-postgres}
      PGDATABASE: ${DATABASE_NAME:-easyopendata_database}
      PGPASSWORD: ${DATABASE_PASSWORD}
    networks:
      - easyopen_network

  easyopen_pgadmin:
    container_name: easyopen_pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./data/pgadmin_data:/var/lib/pgadmin
    depends_on:
      - easyopen_postgis
    networks:
      - easyopen_network

  easyopen_cloudflared:
    container_name: easyopen_cloudflared
    image: cloudflare/cloudflared:latest
    restart: always
    command: 'tunnel --no-autoupdate run --token ${CLOUDFLARED_TUNNEL_TOKEN:?err_CLOUDFLARED_TOKEN_not_set}'
    depends_on:
      - easyopen_backend
      - easyopen_frontend
      - easyopen_tileset
    networks:
      - easyopen_network

volumes:
  postgres_data:
    name: easyopen_pgdata_main
  pgadmin_data:
    name: easyopen_pgadmin_data_main

networks:
  easyopen_network:
    name: easyopen_production_net
    driver: bridge
